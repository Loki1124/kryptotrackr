// Generated by view binder compiler. Do not edit!
package zertex.kryptoapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import zertex.kryptoapp.R;

public final class ActivityCryptoDetailBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView cryptoChange;

  @NonNull
  public final ImageView cryptoImage;

  @NonNull
  public final TextView cryptoName;

  @NonNull
  public final TextView cryptoPrice;

  @NonNull
  public final TextView cryptoSymbol;

  private ActivityCryptoDetailBinding(@NonNull ScrollView rootView, @NonNull TextView cryptoChange,
      @NonNull ImageView cryptoImage, @NonNull TextView cryptoName, @NonNull TextView cryptoPrice,
      @NonNull TextView cryptoSymbol) {
    this.rootView = rootView;
    this.cryptoChange = cryptoChange;
    this.cryptoImage = cryptoImage;
    this.cryptoName = cryptoName;
    this.cryptoPrice = cryptoPrice;
    this.cryptoSymbol = cryptoSymbol;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCryptoDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCryptoDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_crypto_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCryptoDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cryptoChange;
      TextView cryptoChange = ViewBindings.findChildViewById(rootView, id);
      if (cryptoChange == null) {
        break missingId;
      }

      id = R.id.cryptoImage;
      ImageView cryptoImage = ViewBindings.findChildViewById(rootView, id);
      if (cryptoImage == null) {
        break missingId;
      }

      id = R.id.cryptoName;
      TextView cryptoName = ViewBindings.findChildViewById(rootView, id);
      if (cryptoName == null) {
        break missingId;
      }

      id = R.id.cryptoPrice;
      TextView cryptoPrice = ViewBindings.findChildViewById(rootView, id);
      if (cryptoPrice == null) {
        break missingId;
      }

      id = R.id.cryptoSymbol;
      TextView cryptoSymbol = ViewBindings.findChildViewById(rootView, id);
      if (cryptoSymbol == null) {
        break missingId;
      }

      return new ActivityCryptoDetailBinding((ScrollView) rootView, cryptoChange, cryptoImage,
          cryptoName, cryptoPrice, cryptoSymbol);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
